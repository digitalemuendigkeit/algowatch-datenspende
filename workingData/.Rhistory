source('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
users[1]
users[1]:friends_count
users[1][1]
users[1][10]
user1 <- users[1]
users[1]@.Dat
users[1]@.Data
users[1]@.Data[10]
users[1]@.Data['friends_count']
users[1]@.Data[,'friends_count']
sample(1,total_users)
sample(1:total_users, 1)
sample(1:total_users, 1)
sample(1:total_users, 1)
sample(1:total_users, 1)
connect_users <- function(){
for(i in users){
j <- 1
while( j <= users[1]@.Data[,'friends_count']){
k <- sample(1:total_users, 1)
if(connections[i][k] = 0){
connections[i][k] <- 1
connections[k][i] <- 1
j <- j + 1
}
}
}
}
for(i in users){
j <- 1
while( j <= users[1]@.Data[,'friends_count']){
k <- sample(1:total_users, 1)
if(connections[i][k] == 0){
connections[i][k] <- 1
connections[k][i] <- 1
j <- j + 1
}
}
}
connections[1][1] == 0
View(connections)
connections <- diag(total_users)
source('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
View(connections)
source('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
source('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
connect_users()
connect_users()
debugSource('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
connect_users()
sample(1:total_users, 1)
sample(1:total_users, 1)
sample(1:total_users, 1)
sample(1:total_users, 1)
sample(1:total_users, 1)
users@.Data[,'num']
view(users@.Data)
View(users@.Data)
clear
clear()
debugSource('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
View(users@.Data)
source('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
connect_users()
connect_users()
debugSource('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
debugSource('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
source('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
connect_users()
connections[i][k] == 0
connect_users()
connections[i][k] == 0
connections[i][k]
i
k
view connections
view(connections)
View(connections)
connections <- connect_users(connections)
connect_users <- function(connections){
for(i in c(1:total_users)){
j <- 1
while( j <= users[i]@.Data[,'friends_count']){
k <- sample(1:total_users, 1)
if(connections[i][k] == 0){
connections[i][k] <- 1
connections[k][i] <- 1
j <- j + 1
}
}
}
}
connections <- connect_users(connections)
## Packages required
library(NetLogoR)
#Globals
default_distance <- 10
total_users <- 100
connections <- diag(total_users)
## Setup
# Create the world
network <- createWorld(minPxcor = -32, maxPxcor = 32, minPycor = -32, maxPycor = 32)
#Create the users
users <- createTurtles(n = total_users, coords = randomXYcor(world = network, n = total_users),
breed = "User", color = rep("red", total_users))
# Add the repost-likelehood variable
users <- turtlesOwn(turtles = users, tVar = "repost-likelihood",
tVal = rnorm(1, mean = 0, sd = 1))
#Add the friends_count cariable
users <- turtlesOwn(turtles = users, tVar = "friends_count", tVal = sample(1:5, 1))
#create posts
#connect_users <- function(connections){
for(i in c(1:total_users)){
j <- 1
while( j <= users[i]@.Data[,'friends_count']){
k <- sample(1:total_users, 1)
if(connections[i][k] == 0){
connections[i][k] <- 1
connections[k][i] <- 1
j <- j + 1
}
}
}
#}
for(i in c(1:total_users)){
j <- 1
while( j <= users[i]@.Data[,'friends_count']){
k <- sample(1:total_users, 1)
if(connections[i][k] == 0){
connections[i][k] <- 1
connections[k][i] <- 1
j <- j + 1
}
}
}
debugSource('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
connections[i][k] == 0
connections[i][k]
connections
connections[1][1]
connections[1][2]
connections[i][k] != 1
connections[i][k] != NA
connections <- (connections + 0L)
connections[1][3]
connections[1][1]
connections[is.na(connections)] <- 0
connections[1][3]
is.na(connections[1][3])
source('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
View(connections)
warnings()
connections[1][3]
connections[1][3] <- 0
connections[1][3]
connections[is.na[connections]] = 0
connections[is.nan[connections]] = 0
data <- as.data.frame(connections)
data[is.na(data)] <- 0
data[1][1]
warnings()
connections <- zeroes(total_users, total_users)
source('C:/Users/nilsp/OneDrive/Uni/Hiwi/R_Workspace/Two-species/two-species.r', echo=TRUE)
connections <- zeroes(total_users, total_users)
connections <- zeroes(total_users, total_users)
connections <- zeros(total_users, total_users)
data[1][1]
connections <- matrix(0l,total_users, total_users)
connections <- matrix(0l,total_users, total_users)
connections <- matrix(0l,total_users, total_users)
connections <- matrix(0L,total_users, total_users)
total_users <- 100
connections <- matrix(0L,total_users, total_users)
## Packages required
library(NetLogoR)
#Globals
default_distance <- 10
total_users <- 100
connections <- matrix(0L,total_users, total_users)
## Setup
# Create the world
network <- createWorld(minPxcor = -32, maxPxcor = 32, minPycor = -32, maxPycor = 32)
#Create the users
users <- createTurtles(n = total_users, coords = randomXYcor(world = network, n = total_users),
breed = "User", color = rep("red", total_users))
# Add the repost-likelehood variable
users <- turtlesOwn(turtles = users, tVar = "repost-likelihood",
tVal = rnorm(1, mean = 0, sd = 1))
#Add the friends_count cariable
users <- turtlesOwn(turtles = users, tVar = "friends_count", tVal = sample(1:5, 1))
#create posts
#connect_users <- function(connections){
for(i in c(1:total_users)){
j <- 1
while( j <= users[i]@.Data[,'friends_count']){
k <- sample(1:total_users, 1)
if(connections[i][k] == 0 && i != k){
connections[i][k] <- 1
connections[k][i] <- 1
j <- j + 1
}
}
}
#}
connections[1][1]
connections[1][3]
View(connections)
connections[1,3]
## Packages required
library(NetLogoR)
#Globals
default_distance <- 10
total_users <- 100
connections <- diag(total_users)
## Setup
# Create the world
network <- createWorld(minPxcor = -32, maxPxcor = 32, minPycor = -32, maxPycor = 32)
#Create the users
users <- createTurtles(n = total_users, coords = randomXYcor(world = network, n = total_users),
breed = "User", color = rep("red", total_users))
# Add the repost-likelehood variable
users <- turtlesOwn(turtles = users, tVar = "repost-likelihood",
tVal = rnorm(1, mean = 0, sd = 1))
#Add the friends_count cariable
users <- turtlesOwn(turtles = users, tVar = "friends_count", tVal = sample(1:5, 1))
#create posts
#connect_users <- function(connections){
for(i in c(1:total_users)){
j <- 1
while( j <= users[i]@.Data[,'friends_count']){
k <- sample(1:total_users, 1)
if(connections[i][k] == 0){
connections[i][k] <- 1
connections[k][i] <- 1
j <- j + 1
}
}
}
#}
for(i in c(1:total_users)){
j <- 1
while( j <= users[i]@.Data[,'friends_count']){
k <- sample(1:total_users, 1)
if(connections[i,k] == 0){
connections[i,k] <- 1
connections[k,i] <- 1
j <- j + 1
}
}
}
rnorm(1, mean = 0, sd = 1)
rnorm(1, mean = 0, sd = 1)
rnorm(1, mean = 0, sd = 1)
rnorm(1, mean = 0, sd = 1)
rnorm(1, mean = 0, sd = 1)
rnorm(1, mean = 0, sd = 1)
rnorm(1, mean = 0, sd = 1)
rnorm(1, mean = 0, sd = 1)
View(users@.Data)
sample(1:5, 1)
sample(1:5, 1)
sample(1:5, 1)
View(users@.Data[,'who'])
users[2]@.Data[,'friends_count']
users@.Data[2,'friends_count']
summ(connections[1,])
sum(connections[1,])
sum(connections[,1])
## Packages required
library(NetLogoR)
#Globals
default_distance <- 10
total_users <- 100
connections <- diag(total_users)
## Setup
# Create the world
network <- createWorld(minPxcor = -32, maxPxcor = 32, minPycor = -32, maxPycor = 32)
#Create the users
users <- createTurtles(n = total_users, coords = randomXYcor(world = network, n = total_users),
breed = "User", color = rep("red", total_users))
# Add the repost-likelehood variable
users <- turtlesOwn(turtles = users, tVar = "repost-likelihood",
tVal = rnorm(1, mean = 0, sd = 1))
#Add the friends_count cariable
users <- turtlesOwn(turtles = users, tVar = "friends_count", tVal = sample(1:5, 1))
#create posts
#connect_users <- function(connections){
for(i in c(1:total_users)){
j <- 1
while( j <= users[i]@.Data[,'friends_count']){
k <- sample(1:total_users, 1)
if(connections[i,k] == 0){
connections[i,k] <- 1
#connections[k,i] <- 1 #mutual connection
j <- j + 1
}
}
}
#}
sum(connections[,1])
sum(connections[,3])
users[2]@.Data[,'friends_count']
devtools::install_github("statisticsforsocialscience/rmd_templates")
devtools::install_github("statisticsforsocialscience/rmd_templates")
install.packages("rlang")
devtools::install_github("statisticsforsocialscience/rmd_templates")
install.packages("rlang")
install.packages("rlang")
?version
R.Version()
devtools::install_github("statisticsforsocialscience/rmd_templates")
install.packages("digest")
devtools::install_github("statisticsforsocialscience/rmd_templates")
install.packages("rtools")
install.packages("rtool")
devtools::install_github("statisticsforsocialscience/rmd_templates")
install.packages("Rcpp")
devtools::install_github("statisticsforsocialscience/rmd_templates")
install.packages("Rtools")
devtools::install_github("statisticsforsocialscience/rmd_templates")
install.packages("feather")
library(feather)
pwd
df <- read_feather('C:\Users\nilsp\OneDrive\Uni\Hiwi\Python\algowatch-datenspende\workingData\kwMetadata_SPD.feather')
df <- read_feather('C:\\Users\\nilsp\\OneDrive\\Uni\\Hiwi\\Python\\algowatch-datenspende\\workingData\\kwMetadata_SPD.feather')
View(df)
View(df)
getwd()
#import feather files from python
setwd("C:\\Users\\nilsp\\OneDrive\\Uni\\Hiwi\\Python\\algowatch-datenspende\\workingData\\kwMetadata_SPD.feather")
#import feather files from python
setwd("C:\\Users\\nilsp\\OneDrive\\Uni\\Hiwi\\Python\\algowatch-datenspende\\workingData")
getwd()
library(here)
list.files(pattern=".feather$")
list.filenames<-list.files(pattern=".feather$")
list.files?
?list.files
list.filenames<-list.files(here("workingData""),pattern=".feather$")
list.filenames<-list.files(here("workingData"),pattern=".feather$")
all.kewords = data.frame()
all.keywords = data.frame()
merge(all.kewords, df, all = TRUE)
all.keywords <- merge(all.kewords, df, all = TRUE)
here("workingData", list.filenames[1]
)
all.keywords <- merge(all.kewords, df, all.y =  = TRUE)
all.keywords <- merge(all.kewords, df, all.y = TRUE)
all.keywords <- merge(df, all.kewords,all = TRUE)
rbind(all.keywords, df)
list.filenames<-list.files(here("workingData"),pattern=".feather$")
df <- read_feather(here("workingData", list.filenames[1]))
rbind(all.keywords, df)
all.keywords = data.frame()
rbind(all.keywords, df)
for (i in 1:length(list.filenames))
all.keywords = data.frame()
for (i in 1:length(list.filenames))
{
df <- read_feather(here("workingData", list.filenames[i]))
list.data[[i]]<-read.csv(list.filenames[i])
}
for (i in 1:length(list.filenames))
{
df <- read_feather(here("workingData", list.filenames[i]))
}
all.keywords = data.frame()
for (i in 1:length(list.filenames))
{
df <- read_feather(here("workingData", list.filenames[i]))
rbind(all.keywords, df)
}
list.filenames<-list.files(here("workingData"),pattern=".feather$")
all.keywords <- data.frame()
for (i in 1:length(list.filenames))
{
df <- read_feather(here("workingData", list.filenames[i]))
all.keywords <- rbind(all.keywords, df)
}
View(df)
all.keywords %>% ggplot() +
aes(x= timestamp, y= cluster) +
geom_point(shape=1) +
facet_grid(. ~ keyword) +
NULL -> timeplot
library(tidyverse)
all.keywords %>% ggplot() +
aes(x= timestamp, y= cluster) +
geom_point(shape=1) +
facet_grid(. ~ keyword) +
NULL -> timeplot
timeplot
all.keywords %>% ggplot() +
aes(x= timestamp, y= cluster) +
geom_point(shape=1) +
facet_wrap(. ~ keyword) +
NULL -> timeplot
all.keywords %>% ggplot() +
aes(x= timestamp, y= cluster) +
geom_point(shape=1) +
facet_wrap(. ~ keyword) +
NULL
all.keywords %>% ggplot() +
aes(x= timestamp, y= cluster) +
geom_point(shape=0, alpha= 0.5) +
facet_wrap(. ~ keyword) +
NULL
all.keywords %>% ggplot() +
aes(x= timestamp, y= cluster) +
geom_point(shape=2, alpha= 0.5) +
facet_wrap(. ~ keyword) +
NULL
all.keywords %>% ggplot() +
aes(x= timestamp, y= cluster) +
geom_point(shape=16, alpha= 0.5) +
facet_wrap(. ~ keyword) +
NULL
all.keywords %>% ggplot() +
aes(x= timestamp, y= cluster) +
geom_point(shape=16, alpha= 0.3) +
facet_wrap(. ~ keyword) +
NULL
